(defun sane-next-line (arg)
  (interactive "p")
  (let ((newpt (save-excursion (next-line arg) (point))))
    (while (null (pos-visible-in-window-p newpt))
      (if (< arg 0) (scroll-down 1) (scroll-up 1)))
    (goto-char newpt)
    (setq this-command 'next-line)
    ()))
(defun sane-previous-line (arg)
  (interactive "p")
  (sane-next-line (- arg))
  (setq this-command 'previous-line)
  ())
(defun sane-newline (arg)
  (interactive "p")
  (let ((newpt (save-excursion (newline arg) (indent-according-to-mode) (point))))
    (while (null (pos-visible-in-window-p newpt)) (scroll-up 1))
    (goto-char newpt)
    (setq this-command 'newline)
    ()))
(define-key global-map (kbd "<up>") 'sane-previous-line)
(define-key global-map (kbd "<down>") 'sane-next-line)
(define-key global-map (kbd "C-p") 'sane-previous-line)
(define-key global-map (kbd "C-n") 'sane-next-line)
(define-key global-map (kbd "C-j") 'sane-newline)
(define-key global-map (kbd "C-m") 'sane-newline)

(provide 'sane-line)
